
library Keccak256 {

    // TODO: Turning st into a struct should make the script shorter.

    static const int KECCAK_ROUNDS = 24;
    static const int CAPACITY = 32; // 256 / 8  

    static const int[] keccakf_piln = [10, 7, 11, 17, 18, 3, 5, 16, 8, 21, 24, 4, 15, 23, 19, 13, 12,2, 20, 14, 22, 9, 6, 1]; 
    static const int[] keccakf_rotc = [1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 2, 14, 27, 41, 56, 8, 25, 43, 62, 18, 39, 61, 20, 44];

    static const bytes LFSR = b'01';

    static function keccakf32(int[25][4] st) : int[25][4] {
        int[24][4] keccakf_rndc = [
            [0x0000, 0x0000, 0x0000, 0x0001], [0x0000, 0x0000, 0x0000, 0x8082], [0x8000, 0x0000, 0x0000, 0x0808a], [0x8000, 0x0000, 0x8000, 0x8000],
            [0x0000, 0x0000, 0x0000, 0x808b], [0x0000, 0x0000, 0x8000, 0x0001], [0x8000, 0x0000, 0x8000, 0x08081], [0x8000, 0x0000, 0x0000, 0x8009],
            [0x0000, 0x0000, 0x0000, 0x008a], [0x0000, 0x0000, 0x0000, 0x0088], [0x0000, 0x0000, 0x8000, 0x08009], [0x0000, 0x0000, 0x8000, 0x000a],
            [0x0000, 0x0000, 0x8000, 0x808b], [0x8000, 0x0000, 0x0000, 0x008b], [0x8000, 0x0000, 0x0000, 0x08089], [0x8000, 0x0000, 0x0000, 0x8003],
            [0x8000, 0x0000, 0x0000, 0x8002], [0x8000, 0x0000, 0x0000, 0x0080], [0x0000, 0x0000, 0x0000, 0x0800a], [0x8000, 0x0000, 0x8000, 0x000a],
            [0x8000, 0x0000, 0x8000, 0x8081], [0x8000, 0x0000, 0x0000, 0x8080], [0x0000, 0x0000, 0x8000, 0x00001], [0x8000, 0x0000, 0x8000, 0x8008]
        ];

        int[5][4] bc = [
            [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]
        ];


        loop (KECCAK_ROUNDS) : round {

            // Theta
            loop (5) : i {
                bc[i] = [
                    st[i][0] ^ st[i + 5][0] ^ st[i + 10][0] ^ st[i + 15][0] ^ st[i + 20][0],
                    st[i][1] ^ st[i + 5][1] ^ st[i + 10][1] ^ st[i + 15][1] ^ st[i + 20][1],
                    st[i][2] ^ st[i + 5][2] ^ st[i + 10][2] ^ st[i + 15][2] ^ st[i + 20][2],
                    st[i][3] ^ st[i + 5][3] ^ st[i + 10][3] ^ st[i + 15][3] ^ st[i + 20][3]
                ];
            }

            loop (5) : i {
                int[4] t = [
                    bc[(i + 4) % 5][0] ^ (((bc[(i + 1) % 5][0] << 1) | (bc[(i + 1) % 5][1] >> 15)) & (0xffff)),
                    bc[(i + 4) % 5][1] ^ (((bc[(i + 1) % 5][1] << 1) | (bc[(i + 1) % 5][2] >> 15)) & (0xffff)),
                    bc[(i + 4) % 5][2] ^ (((bc[(i + 1) % 5][2] << 1) | (bc[(i + 1) % 5][3] >> 15)) & (0xffff)),
                    bc[(i + 4) % 5][3] ^ (((bc[(i + 1) % 5][3] << 1) | (bc[(i + 1) % 5][0] >> 15)) & (0xffff))
                ];

                loop (5) : j0 {
                    int j = j0 * 5;
                    st[j + i] = [
                        st[j + i][0] ^ t[0],
                        st[j + i][1] ^ t[1],
                        st[j + i][2] ^ t[2],
                        st[j + i][3] ^ t[3]
                    ];
                }
            }

            // Rho Pi
            int[4] t = st[1];
            loop (24) : i {
                int j = keccakf_piln[i];
                bc[0] = st[j];

                int n = keccakf_rotc[i] >> 4;
                int m = keccakf_rotc[i] % 16;

                st[j] = [
                    (((t[(0+n) % 4] << m) | (t[(1+n) % 4] >> (16-m))) & (0xffff)),
                    (((t[(1+n) % 4] << m) | (t[(2+n) % 4] >> (16-m))) & (0xffff)),
                    (((t[(2+n) % 4] << m) | (t[(3+n) % 4] >> (16-m))) & (0xffff)),
                    (((t[(3+n) % 4] << m) | (t[(0+n) % 4] >> (16-m))) & (0xffff))
                ];

                t = bc[0];
            }

            // Chi
            loop (5) : j0 {
                int j = j0 * 5;
                loop (5) : i {
                    bc[i] = st[j + i];
                }
                loop (5) : i {
                    st[j + i] = [
                        st[j + i][0] ^ ~bc[(i + 1) % 5][0] & bc[(i + 2) % 5][0],
                        st[j + i][1] ^ ~bc[(i + 1) % 5][1] & bc[(i + 2) % 5][1],
                        st[j + i][2] ^ ~bc[(i + 1) % 5][2] & bc[(i + 2) % 5][2],
                        st[j + i][3] ^ ~bc[(i + 1) % 5][3] & bc[(i + 2) % 5][3]
                    ];
                }
            }

            // Iota
            st[0] = [
                st[0][0] ^ keccakf_rndc[round][0],
                st[0][1] ^ keccakf_rndc[round][1],
                st[0][2] ^ keccakf_rndc[round][2],
                st[0][3] ^ keccakf_rndc[round][3]
            ];
        }

        return st;
    }


    // Hash byte array with a maximum length of 32 bytes.
    static function hash32(bytes b) : bytes {
        const int MAX_IN_BYTES = 32;
        int inlen = len(b);
        require(inlen <= MAX_IN_BYTES);

        const int rsiz = 136; // 200 - 2 * CAPACITY;
        const int rsizw = 17; // rsiz / 8

        int[25][4] st = [
            [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], 
            [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], 
            [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], 
            [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], 
            [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0], [0,0,0,0]
        ];

        int loopMax = inlen / rsiz;
        int in_t = 0;
        loop (32) : i { // loop (MAX_IN_BYTES)
            if (i < loopMax) {
                in_t = i * rsiz;

                loop (17) : j {  // loop (rsizw)
                    int start = j % inlen;
                    int end = (j + 2) % inlen;
                    int x0 = unpack(b[start:end]);

                    start = end;
                    end = (start + 2) % inlen;
                    int x1 = unpack(b[start:end]);

                    start = end;
                    end = (start + 2) % inlen;
                    int x2 = unpack(b[start:end]);

                    start = end;
                    end = (start + 2) % inlen;
                    int x3 = unpack(b[start:end]);

                    st[j] = [
                        st[j][0] ^ x3,
                        st[j][1] ^ x2,
                        st[j][2] ^ x1,
                        st[j][3] ^ x0
                    ];
                }

                st = keccakf32(st);
            }
        }

        int start = in_t / 2;
        int end = start + inlen;
        bytes temp = b[start:end];

        // TODO
        int padLen = rsiz - (end - start);
        //loop (padLen) {
        loop (136) {
            temp += b'00';
        }
        
        temp = temp[:inlen] + LFSR + temp[inlen + 1:];

        bytes repl = num2bin(unpack(temp[rsiz - 1:rsiz]) | 0x80, 1);
        temp = temp[:rsiz - 1] + repl + temp[rsiz:];

        loop (17) : i0 { // loop (rsizw)
            int i = i0 * 4; 
            int t0 = unpack(temp[i:i+1]);
            int t1 = unpack(temp[i+1:i+2]);
            int t2 = unpack(temp[i+2:i+3]);
            int t3 = unpack(temp[i+3:i+4]);

            st[i] = [
                st[i][0] ^ t3,
                st[i][1] ^ t2,
                st[i][2] ^ t1,
                st[i][3] ^ t0
            ];
        }

        st = keccakf32(st);

        bytes out = b'';
        loop (25) : i {
            out += num2bin(st[i][3], 2) + num2bin(st[i][2], 2) + num2bin(st[i][1], 2) + num2bin(st[i][0], 2);
        }

        return out[:CAPACITY];
    }

}
